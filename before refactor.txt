import fetch from "node-fetch";
import * as dotenv from "dotenv";
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const admin = require('firebase-admin');
const { usersCollectionPromise } = require('../firebase/connect.cjs');

dotenv.config();

export const handleTextMessage = async (name, message, number) => {
  console.log(message, number);
  const usersCollection = await usersCollectionPromise;
  let user = (await usersCollection.doc(number).get()).data();  


  if (!user) {
    user = {
      name: name,
      number: number,
      messages: {
        received: [],
        sent: [],
      },
      state: "new",
      lastAction: "",
    };
    await usersCollection.doc(number).set(user);
  } else {
    await usersCollection.doc(number).update({
      "messages.received": admin.firestore.FieldValue.arrayUnion(message),
    });
  }

  if (user.state === "new") {
    await usersCollection.doc(number).update({
      state: "menu",
    });  
    return `Hello ${name}, welcome!

Please select one of the following product categories:
1. Electronics
2. Clothing
3. Food
4. Furniture`;
  } else if (user.state === "menu") {
    if (message == "1") {
      await usersCollection.doc(number).update({
        state: "electronics",
      });
    
      return `You selected Electronics category.

Please choose a product:
1. Smartphone
2. Laptop
3. Television`;
    } else if (message == "2") {
      await usersCollection.doc(number).update({
        state: "clothing",
      });
    
      return `You selected Clothing category.

Please choose a product:
1. Shirt
2. Pants
3. Dress`;
    } else if (message == "3") {
      await usersCollection.doc(number).update({
        state: "food",
      });
    
      return `You selected Food category.

Please choose a product:
1. Pizza
2. Burger
3. Salad`;
    } else if (message == "4") {
      await usersCollection.doc(number).update({
        state: "furniture",
      });
    
      return `You selected Furniture category.

Please choose a product:
1. Sofa
2. Bed
3. Table`;
    } else {
      return `Invalid selection. Please select one of the following product categories:
1. Electronics
2. Clothing
3. Food
4. Furniture`;
    }
  } else if (
    ["electronics", "clothing", "food", "furniture"].includes(user.state)
  ) {
    return `You requested product: *${message}*. We will process your request and get back to you shortly.`;
  } else {
    return `Unknown command. Please select one of the following product categories:
1. Electronics
2. Clothing
3. Food
4. Furniture`;
  }
};

export const notTextMsg = async (name, messageType) => {
  return `Hello ${name}, we received your message but we don't know how to handle *${messageType}* yet. 
So please send us a text message.`;
};

export const sendMessage = async (
  toPhoneNumber,
  messageContent,
  retries = 3
) => {
  const apiUrl = `https://graph.facebook.com/v16.0/${process.env.PHONE_NUMBER_ID}/messages`;

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.WHATSAPP_ACCESS_TOKEN}`,
      },
      body: JSON.stringify({
        messaging_product: "whatsapp",
        recipient_type: "individual",
        to: toPhoneNumber,
        type: "text",
        text: {
          preview_url: false,
          body: messageContent,
        },
      }),
    });

    if (response.ok) {
      console.log("Message sent successfully.");
    } else {
      console.error("Error sending message: ", response.statusText);
    }
  } catch (error) {
    console.error("Error sending message: ", error);

    if (retries > 0) {
      console.log(`Retrying... attempts remaining: ${retries}`);
      await new Promise((resolve) =>
        setTimeout(resolve, 2 ** (3 - retries) * 1000)
      ); // Exponential backoff
      await sendMessage(toPhoneNumber, messageContent, retries - 1);
    } else {
      console.error("All retries exhausted. Message not sent.");
      return;
    }
  }
};